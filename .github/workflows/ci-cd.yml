name: CI/CD - Flask CarApp

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/car-app
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.sha }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy_to_ec2:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Write SSH key
        shell: bash
        run: |
          umask 077
          cat > key.pem <<'KEY'
          ${{ secrets.EC2_SSH_KEY }}
          KEY
          chmod 600 key.pem

      - name: Update image tag on EC2 and restart web
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          SHA: ${{ github.sha }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem "$USER@$HOST" bash -lc '
            set -e
            cd /opt/carapp

            # 1) .env de çalışacak imaj tagini commit SHA yap
            if grep -q "^CARAPP_TAG=" .env; then
              sudo sed -i "s/^CARAPP_TAG=.*/CARAPP_TAG='"$SHA"'/" .env
            else
              echo "CARAPP_TAG='"$SHA"'" | sudo tee -a .env
            fi

            # 2) Registry login + sadece web'i yenile
            echo "'"$DOCKER_TOKEN"'" | sudo docker login -u "'"$DOCKER_USER"'" --password-stdin
            sudo docker compose pull web
            sudo docker compose up -d --no-deps web

            # 3) (opsiyonel) health kontrol
            curl -sf http://127.0.0.1:8080/api/health || echo "health endpoint yok/başarısız ama deploy tamam"
          '
